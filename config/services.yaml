# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  Psr\SimpleCache\CacheInterface: '@road_runner.key_value.psr16'
  Symfony\Component\Serializer\Normalizer\DenormalizerInterface: '@Symfony\Component\Serializer\SerializerInterface'

  Symfony\Component\PasswordHasher\PasswordHasherInterface:
    class: Symfony\Component\PasswordHasher\Hasher\NativePasswordHasher

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  FC\UI\Http\Web\Controller\:
    resource: '../src/UI/Http/Web/Controller/'
    tags: [ 'controller.service_arguments' ]

  FC\UI\Http\Rest\V1\Controller\:
    resource: '../src/UI/Http/Rest/V1/Controller/'
    tags: [ 'controller.service_arguments' ]

  FC\UI\Cli\Command\GenerateKeyPairCommand:
    arguments:
      $secretKey: '%env(JWT_PRIVATE_KEY)%'
      $publicKey: '%env(JWT_PUBLIC_KEY)%'
      $passphrase: '%env(JWT_PASSPHRASE)%'
    tags:
      - { name: 'console.command', command: 'jwt:generate-keypair' }

  FC\UI\Cli\Command\GenerateTokenCommand:
    tags:
      - { name: 'console.command', command: 'jwt:generate-token' }

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones
