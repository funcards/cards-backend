<!DOCTYPE html>
<html lang="en">
<head>
    {% block meta %}
        <meta charset="UTF-8">
    {% endblock meta %}
    <title>{% block title %}{{ swagger_data.spec.info.title }}{% endblock title %}</title>
    {% block stylesheets %}
        <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.52.4/swagger-ui.min.css">
    {% endblock stylesheets %}
    {% block swagger_data %}
        {# json_encode(65) is for JSON_UNESCAPED_SLASHES|JSON_HEX_TAG to avoid JS XSS #}
        <script id="swagger-data" type="application/json">{{ swagger_data|json_encode(65)|raw }}</script>
    {% endblock swagger_data %}
</head>
<body>
{% block swagger_ui %}
    <div id="swagger-ui"></div>
{% endblock %}
{% block javascripts %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.52.4/swagger-ui-bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.52.4/swagger-ui-standalone-preset.min.js"></script>
{% endblock javascripts %}
{% block swagger_initialization %}
    <script type="text/javascript">
        (function () {
            window.onload = function () {
                const data = JSON.parse(document.getElementById('swagger-data').innerText);
                const options = {
                    spec: data.spec,
                    dom_id: '#swagger-ui',
                    validatorUrl: null,
                    deepLinking: true,
                    presets: [
                        SwaggerUIBundle.presets.apis,
                        SwaggerUIStandalonePreset
                    ],
                    plugins: [
                        SwaggerUIBundle.plugins.DownloadUrl
                    ],
                    layout: 'StandaloneLayout'
                };
                const ui = SwaggerUIBundle(options);

                const storageKey = 'nelmio_api_auth';

                // if we have auth in storage use it
                if (sessionStorage.getItem(storageKey)) {
                    try {
                        ui.authActions.authorize(JSON.parse(sessionStorage.getItem(storageKey)));
                    } catch (ignored) {
                        // catch any errors here so it does not stop script execution
                    }
                }

                // hook into authorize to store the auth in local storage when user performs authorization
                const currentAuthorize = ui.authActions.authorize;
                ui.authActions.authorize = function (payload) {
                    sessionStorage.setItem(storageKey, JSON.stringify(payload));
                    return currentAuthorize(payload);
                };

                // hook into logout to clear auth from storage if user logs out
                const currentLogout = ui.authActions.logout;
                ui.authActions.logout = function (payload) {
                    sessionStorage.removeItem(storageKey);
                    return currentLogout(payload);
                };

                window.ui = ui;
            };
        })();
    </script>
{% endblock swagger_initialization %}
</body>
</html>
